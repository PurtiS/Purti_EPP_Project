"""Functions for fitting the regression model."""

import statsmodels.api as sm
from psmpy import PsmPy
from psmpy.plotting import *
from statsmodels.iolib.smpickle import load_pickle


def drop_na(df):
    """The drop_na function takes a DataFrame df and drops all rows with missing values.

    Args:
    df: A pandas DataFrame with potential missing values.

    Returns:
    A new pandas DataFrame with all rows containing missing values dropped.

    """
    return df.dropna()


def create_psm(df, treatment, indx, exclude):
    """Create a Propensity Score Matching object using PsmPy.

    Args:
        df (pandas.DataFrame): The data frame containing the data to be used in the
            matching.
        treatment (str): The name of the column containing the treatment variable.
        indx (str): The name of the column containing the unique identifier for each
            observation.
        exclude (List[str]): A list of column names to exclude from the matching.

    Returns:
        PsmPy: A Propensity Score Matching object initialized with the given data and
            settings.

    """
    return PsmPy(df, treatment=treatment, indx=indx, exclude=exclude)


def run_logistic_ps(psm, balance=False):
    """Compute propensity scores using logistic regression on the propensity scores generated by the PSM algorithm.

    Args:
        psm (PsmPy): The Propensity Score Matching object containing the data to be used
            in the matching.
        balance (bool, optional): Whether to calculate standardized differences for
            covariates before and after matching to evaluate balance. Defaults to False.

    Returns:
        pandas.DataFrame: A data frame containing the propensity scores.

    """
    return psm.logistic_ps(balance=balance)


def fit_regression_model(data):
    """Fits an Ordinary Least Squares (OLS) regression model to the matched data.

    Args:
    - data: Pandas DataFrame containing the data for the regression model. The DataFrame must have the following
    columns:
        - "aggregate_loneliness_2017": Numeric column representing the outcome variable.
        - "went_unemployed": Binary column representing the treatment variable. 1
        for individuals who experienced unemployment during the study period and 0 otherwise.
        - "age": Numeric column representing the age of the individual.
        - "sex": Binary variable, 1 for men and 0 for women.
        - "education": Numeric column representing the highest level of education attained by the individual.
        - "marital_status": Binary variable, 1 for married and living together and 0 for all other categories.
        - "aggregate_loneliness_2013": Numeric column representing the value of aggregate loneliness for the same
        individual in 2013.
        - "hh_members": Numeric column representing the number of members in the individual's household.
        - "hh_income": Numeric column representing the income of the individual's household.

    Returns:
    - regression_result: OLS regression result object returned by the statsmodels package. This object contains
    information about the coefficients, standard errors, p-values, and other statistics of the regression model.

    """
    outcome_var = "aggregate_loneliness_2017"
    treatment_var = "went_unemployed"
    covariates = (
        "age",
        "sex",
        "education",
        "marital_status",
        "aggregate_loneliness_2013",
        "hh_members",
        "hh_income",
    )
    regression_formula = (
        outcome_var + " ~ " + treatment_var + " + " + " + ".join(covariates)
    )

    # Fit regression model
    regression_result = sm.OLS.from_formula(regression_formula, data=data).fit()

    return regression_result


def load_model(path):
    """Load statsmodels model.

    Args:
        path (str or pathlib.Path): Path to model file.

    Returns:
        A statsmodels model loaded from the specified path.

    """
    return load_pickle(path)


def perform_subgroup_analysis_age(matched_data):
    """Performs subgroup analysis on a matched dataset by age group.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for the specified age group.

    """
    # Subset the data into age subgroups
    age_subgroup1 = matched_data[matched_data["age"] < 50]
    age_subgroup2 = matched_data[matched_data["age"] >= 50]

    # Calculate treatment effect for each subgroup
    subgroup1_effect = (
        sm.OLS(
            age_subgroup1["aggregate_loneliness_2017"],
            age_subgroup1["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    subgroup2_effect = (
        sm.OLS(
            age_subgroup2["aggregate_loneliness_2017"],
            age_subgroup2["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    subgroup1_pvalue = (
        sm.OLS(
            age_subgroup1["aggregate_loneliness_2017"],
            age_subgroup1["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    subgroup2_pvalue = (
        sm.OLS(
            age_subgroup2["aggregate_loneliness_2017"],
            age_subgroup2["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    # Store the results in a dataframe
    results_df = pd.DataFrame(
        {
            "Subgroup": ["Age < 50", "Age >= 50"],
            "Treatment Effect": [subgroup1_effect, subgroup2_effect],
            "P-Value": [subgroup1_pvalue, subgroup2_pvalue],
        },
    )

    return results_df


def perform_subgroup_analysis_gender(matched_data):
    """Performs subgroup analysis on a matched dataset by sex, 1 for males and 0 for females.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for the specified sex.

    """
    male_subgroup = matched_data[matched_data["sex"] == 1]
    female_subgroup = matched_data[matched_data["sex"] == 0]

    male_effect = (
        sm.OLS(
            male_subgroup["aggregate_loneliness_2017"],
            male_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    female_effect = (
        sm.OLS(
            female_subgroup["aggregate_loneliness_2017"],
            female_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    male_pvalue = (
        sm.OLS(
            male_subgroup["aggregate_loneliness_2017"],
            male_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    female_pvalue = (
        sm.OLS(
            female_subgroup["aggregate_loneliness_2017"],
            female_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    results_df = pd.DataFrame(
        {
            "Subgroup": ["Male", "Female"],
            "Treatment Effect": [male_effect, female_effect],
            "P-Value": [male_pvalue, female_pvalue],
        },
    )

    return results_df


def perform_subgroup_analysis_marital_status(matched_data):
    """Performs subgroup analysis on a matched dataset by marital status which is defined by marital status of 1 for people married and living together and 0 for all others.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for the people who are married and living together and other.

    """
    married_subgroup = matched_data[matched_data["marital_status"] == 1]
    other_subgroup = matched_data[matched_data["marital_status"] == 0]

    married_effect = (
        sm.OLS(
            married_subgroup["aggregate_loneliness_2017"],
            married_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    other_effect = (
        sm.OLS(
            other_subgroup["aggregate_loneliness_2017"],
            other_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    married_pvalue = (
        sm.OLS(
            married_subgroup["aggregate_loneliness_2017"],
            married_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    other_pvalue = (
        sm.OLS(
            other_subgroup["aggregate_loneliness_2017"],
            other_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    results_df = pd.DataFrame(
        {
            "Subgroup": ["Married", "Other"],
            "Treatment Effect": [married_effect, other_effect],
            "P-Value": [married_pvalue, other_pvalue],
        },
    )

    return results_df


def perform_subgroup_analysis_health(matched_data):
    """Performs subgroup analysis on a matched dataset by health. Average health is 3 and therefore the analysis is based on people above and below average health.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for the health above and lower average.

    """
    # Subset the data into health subgroups
    high_health_subgroup = matched_data[matched_data["health_2013"] > 3]
    low_health_subgroup = matched_data[matched_data["health_2013"] <= 3]

    # Calculate treatment effect for each subgroup
    high_health_effect = (
        sm.OLS(
            high_health_subgroup["aggregate_loneliness_2017"],
            high_health_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    low_health_effect = (
        sm.OLS(
            low_health_subgroup["aggregate_loneliness_2017"],
            low_health_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    # Conduct statistical tests for each subgroup
    high_health_pvalue = (
        sm.OLS(
            high_health_subgroup["aggregate_loneliness_2017"],
            high_health_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    low_health_pvalue = (
        sm.OLS(
            low_health_subgroup["aggregate_loneliness_2017"],
            low_health_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    # Store the results in a dataframe
    results_df = pd.DataFrame(
        {
            "Subgroup": ["High Health", "Low Health"],
            "Treatment Effect": [high_health_effect, low_health_effect],
            "P-Value": [high_health_pvalue, low_health_pvalue],
        },
    )

    return results_df


def perform_subgroup_analysis_education(matched_data):
    """Performs subgroup analysis on a matched dataset by education level.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for each subgroup.

    """
    # Subset the data into education subgroups
    high_edu_subgroup = matched_data[matched_data["education"] >= 13]
    low_edu_subgroup = matched_data[matched_data["education"] < 13]

    # Calculate treatment effect for each subgroup
    high_edu_effect = (
        sm.OLS(
            high_edu_subgroup["aggregate_loneliness_2017"],
            high_edu_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    low_edu_effect = (
        sm.OLS(
            low_edu_subgroup["aggregate_loneliness_2017"],
            low_edu_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    # Conduct statistical tests for each subgroup
    high_edu_pvalue = (
        sm.OLS(
            high_edu_subgroup["aggregate_loneliness_2017"],
            high_edu_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    low_edu_pvalue = (
        sm.OLS(
            low_edu_subgroup["aggregate_loneliness_2017"],
            low_edu_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    # Store the results in a dataframe
    results_df = pd.DataFrame(
        {
            "Subgroup": ["High Education (>=13)", "Low Education (<13)"],
            "Treatment Effect": [high_edu_effect, low_edu_effect],
            "P-Value": [high_edu_pvalue, low_edu_pvalue],
        },
    )

    return results_df


def perform_subgroup_analysis_hhsize(matched_data):
    """Performs subgroup analysis on a matched dataset by number of members in the household.

    Parameters:
    - matched_data (pandas DataFrame): the matched dataset to perform subgroup analysis on

    Returns:
    - results_df (pandas DataFrame): a dataframe containing the treatment effect and p-value for each subgroup.

    """
    # Subset the data into household members subgroups
    low_hh_members_subgroup = matched_data[matched_data["hh_members"] < 2]
    high_hh_members_subgroup = matched_data[matched_data["hh_members"] >= 2]

    # Calculate treatment effect for each subgroup
    low_hh_members_effect = (
        sm.OLS(
            low_hh_members_subgroup["aggregate_loneliness_2017"],
            low_hh_members_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )
    high_hh_members_effect = (
        sm.OLS(
            high_hh_members_subgroup["aggregate_loneliness_2017"],
            high_hh_members_subgroup["went_unemployed"],
        )
        .fit()
        .params[0]
    )

    # Conduct statistical tests for each subgroup
    low_hh_members_pvalue = (
        sm.OLS(
            low_hh_members_subgroup["aggregate_loneliness_2017"],
            low_hh_members_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )
    high_hh_members_pvalue = (
        sm.OLS(
            high_hh_members_subgroup["aggregate_loneliness_2017"],
            high_hh_members_subgroup["went_unemployed"],
        )
        .fit()
        .pvalues[0]
    )

    # Store the results in a dataframe
    results_df = pd.DataFrame(
        {
            "Subgroup": ["HH Members < 2", "HH Members >= 2"],
            "Treatment Effect": [low_hh_members_effect, high_hh_members_effect],
            "P-Value": [low_hh_members_pvalue, high_hh_members_pvalue],
        },
    )

    return results_df
