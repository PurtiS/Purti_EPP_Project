"""Functions for fitting the regression model."""

import statsmodels.api as sm
from psmpy import PsmPy
from psmpy.plotting import *
from statsmodels.iolib.smpickle import load_pickle


def drop_na(df):
    """The drop_na function takes a DataFrame df and drops all rows with missing values.

    Args:
    df: A pandas DataFrame with potential missing values.

    Returns:
    A new pandas DataFrame with all rows containing missing values dropped.

    """
    return df.dropna()


def create_psm(df, treatment, indx, exclude):
    """Create a Propensity Score Matching object using PsmPy.

    Args:
        df (pandas.DataFrame): The data frame containing the data to be used in the
            matching.
        treatment (str): The name of the column containing the treatment variable.
        indx (str): The name of the column containing the unique identifier for each
            observation.
        exclude (List[str]): A list of column names to exclude from the matching.

    Returns:
        PsmPy: A Propensity Score Matching object initialized with the given data and
            settings.

    """
    return PsmPy(df, treatment=treatment, indx=indx, exclude=exclude)


def run_logistic_ps(psm, balance=False):
    """Compute propensity scores using logistic regression on the propensity scores generated by the PSM algorithm.

    Args:
        psm (PsmPy): The Propensity Score Matching object containing the data to be used
            in the matching.
        balance (bool, optional): Whether to calculate standardized differences for
            covariates before and after matching to evaluate balance. Defaults to False.

    Returns:
        pandas.DataFrame: A data frame containing the propensity scores.

    """
    return psm.logistic_ps(balance=balance)


def fit_regression_model(data):
    """Fits an Ordinary Least Squares (OLS) regression model to the matched data.

    Args:
    - data: Pandas DataFrame containing the data for the regression model. The DataFrame must have the following
    columns:
        - "aggregate_loneliness_2017": Numeric column representing the outcome variable.
        - "went_unemployed": Binary column representing the treatment variable. 1
        for individuals who experienced unemployment during the study period and 0 otherwise.
        - "age": Numeric column representing the age of the individual.
        - "sex": Binary variable, 1 for men and 0 for women.
        - "education": Numeric column representing the highest level of education attained by the individual.
        - "marital_status": Binary variable, 1 for married and living together and 0 for all other categories.
        - "aggregate_loneliness_2013": Numeric column representing the value of aggregate loneliness for the same
        individual in 2013.
        - "hh_members": Numeric column representing the number of members in the individual's household.
        - "hh_income": Numeric column representing the income of the individual's household.

    Returns:
    - regression_result: OLS regression result object returned by the statsmodels package. This object contains
    information about the coefficients, standard errors, p-values, and other statistics of the regression model.

    """
    outcome_var = "aggregate_loneliness_2017"
    treatment_var = "went_unemployed"
    covariates = (
        "age",
        "sex",
        "education",
        "marital_status",
        "aggregate_loneliness_2013",
        "hh_members",
        "hh_income",
    )
    regression_formula = (
        outcome_var + " ~ " + treatment_var + " + " + " + ".join(covariates)
    )

    # Fit regression model
    regression_result = sm.OLS.from_formula(regression_formula, data=data).fit()

    return regression_result


def load_model(path):
    """Load statsmodels model.

    Args:
        path (str or pathlib.Path): Path to model file.

    Returns:
        A statsmodels model loaded from the specified path.

    """
    return load_pickle(path)
